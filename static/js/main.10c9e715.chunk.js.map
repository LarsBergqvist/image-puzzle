{"version":3,"sources":["reducers/actions.js","reducers/thunks.js","views/EnterNameView.js","views/LeaderBoardView.js","views/GameStatusView.js","views/TileView.js","views/PuzzleView.js","views/RestartButtonsView.js","constants.js","views/GameHeaderView.js","views/GameView.js","App.js","reportWebVitals.js","game-configs.js","reducers/tileset-functions.js","reducers/tile-game-reducer.js","index.js"],"names":["INIT_GAME","SHUFFLE_TILES","REVERSE_TILES","SELECT_TILE","HIGHSCORE_LIST_LOADED","NAME_CHANGED","HIGHSCORE_LIST_SAVED","initGame","gameId","imageNumber","type","shuffleTiles","fetchHighScoreList","dispatch","getState","a","process","length","url","highScoreListId","get","result","highScoreList","console","error","updateHighScoreList","state","userName","body","score","turnNo","id","userId","post","getUrl","fetch","headers","ApiKey","response","ok","Error","json","method","JSON","stringify","EnterNameView","connect","highScorePosition","onSubmitNameToHighScore","onNameChanged","name","nameChanged","props","useState","setUserName","minLength","maxLength","required","onChange","event","target","value","className","onClick","LeaderBoardView","rows","results","map","r","idx","Date","utcDateTime","toLocaleDateString","unit","GameStatusView","gameComplete","numClicksWithinTurn","highScoreListSaved","TileView","i","top","Math","floor","size","tileWidth","left","imPath","window","location","href","style","backgroundPosition","backgroundImage","backgroundSize","width","correctPos","outline","outlineOffset","selected","PuzzleView","tiles","selectedId","onTileClicked","selectTile","min","innerWidth","innerHeight","tileWrapperStyle","tileContainerStyle","gridTemplateColumns","t","RestartButtonsView","onInitGame","random","GameHeaderView","gameName","GameView","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","gameConfigs","generateTileSet","newTilesArray","newTile","push","reverseTileSet","reverse","shuffleTileSet","shuffle","swapTilesInSet","sourceId","destId","copy","sourceIdx","findIndex","source","destIdx","dest","Object","assign","allTilesAreAligned","getIndexInHighScoreList","newUserId","userTime","resultsCopy","time","isNaN","parse","sort","b","idxInHighScoreList","maxSize","initialState","undefined","tileGame","action","highscorelistid","numClicks","newTiles","setWithSwappedTiles","uuidv4","now","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.10c9e715.chunk.js","sourcesContent":["export const INIT_GAME = 'INIT_GAME';\nexport const SHUFFLE_TILES = 'SHUFFLE_TILES';\nexport const REVERSE_TILES = 'REVERSE_TILES';\nexport const SELECT_TILE = 'SELECT_TILE';\nexport const HIGHSCORE_LIST_LOADED = 'HIGHSCORE_LIST_LOADED';\nexport const NAME_CHANGED = 'NAME_CHANGED';\nexport const HIGHSCORE_LIST_SAVED = 'HIGHSCORE_LIST_SAVED';\n\nexport function initGame(gameId, imageNumber) {\n    return { type: INIT_GAME, gameId, imageNumber };\n}\n\nexport function selectTile(id) {\n    return { type: SELECT_TILE, id };\n}\n\nexport function shuffleTiles() {\n    return {\n        type: SHUFFLE_TILES\n    };\n}\n\nexport function reverseTiles() {\n    return {\n        type: REVERSE_TILES\n    };\n}\n\nexport function highScoreListLoaded(highScoreList) {\n    return { type: HIGHSCORE_LIST_LOADED, highScoreList };\n}\n\nexport function nameChanged(name) {\n    return { type: NAME_CHANGED, name };\n}\n\nexport function highScoreListSaved(highScoreList) {\n    return { type: HIGHSCORE_LIST_SAVED, highScoreList };\n}","import {\n    HIGHSCORE_LIST_LOADED,\n    HIGHSCORE_LIST_SAVED\n} from './actions';\n\nexport async function fetchHighScoreList(dispatch, getState) {\n    if (process.env.REACT_APP_APIURL.length === 0) {\n        return;\n    }\n    let url = `${process.env.REACT_APP_APIURL}/highscore-lists/${getState().highScoreListId}`;\n    try {\n        let result = await get(url);\n        dispatch({\n            type: HIGHSCORE_LIST_LOADED,\n            highScoreList: result\n        });\n    } catch (e) {\n        console.error('Network request failed');\n    }\n}\n\nexport async function updateHighScoreList(dispatch, getState) {\n    if (process.env.REACT_APP_APIURL.length === 0) {\n        return;\n    }\n\n    let url = `${process.env.REACT_APP_APIURL}/highscore-lists/${getState().highScoreListId}/game-results`;\n\n    var state = getState();\n\n    if (!state.userName || state.userName.length === 0) {\n        return;\n    }\n\n    let body = {\n        userName: state.userName,\n        score: state.turnNo - 1,\n        id: state.userId\n    };\n\n    try {\n        await post(url, body);\n    } catch (e) {\n        console.error('Network request failed3');\n        return;\n    }\n\n    let getUrl = `${process.env.REACT_APP_APIURL}/highscore-lists/${getState().highScoreListId}`;\n    let result = await get(getUrl);\n\n    dispatch({\n        type: HIGHSCORE_LIST_SAVED, highScoreList: result\n    });\n}\n\nasync function get(url) {\n    try {\n        let response = await fetch(url, {\n            headers: {\n                ApiKey: `${process.env.REACT_APP_APIKEY}`\n            }\n        });\n        if (!response.ok) {\n            throw Error('Network request failed');\n        }\n        return await response.json();\n    } catch (e) {\n        throw Error('Network request failed');\n    }\n}\n\nasync function post(url, body) {\n    try {\n        let response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                ApiKey: `${process.env.REACT_APP_APIKEY}`\n            },\n            body: JSON.stringify(body),\n        });\n        if (!response.ok) {\n            throw Error('Network request failed');\n        }\n    } catch (e) {\n        throw Error('Network request failed');\n    }\n}\n\n","\nimport React, { useState } from 'react';\nimport { connect } from 'react-redux'\nimport { nameChanged } from '../reducers/actions';\nimport { updateHighScoreList } from '../reducers/thunks';\nimport PropTypes from 'prop-types';\n\nconst EnterName = props => {\n\n    const [userName, setUserName] = useState('');\n\n    return <>\n        <div>\n            YOU MADE IT TO #{props.highScorePosition} on the leaderboard!\n        </div>\n        Enter your name:\n        <input\n            type='text'\n            minLength='3' maxLength='25'\n            required\n            onChange={(event) => {\n                setUserName(event.target.value);\n                props.onNameChanged(event.target.value);\n            }}\n        />\n        <div>\n            {userName.length >= 3 && userName.length <= 25 &&\n                <button className='game-button' onClick={() => props.onSubmitNameToHighScore(userName)}>Submit</button>\n            }\n        </div>\n    </>;\n}\n\nEnterName.propTypes = {\n    highScorePosition: PropTypes.number,\n    onNameChanged: PropTypes.func,\n    onSubmitNameToHighScore: PropTypes.func\n};\n\nconst mapStateToProps = state => {\n    return {\n        highScorePosition: state.highScorePosition,\n        highScoreList: state.highScoreList,\n    };\n};\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSubmitNameToHighScore: () => {\n            dispatch(updateHighScoreList);\n        },\n        onNameChanged: (name) => {\n            dispatch(nameChanged(name));\n        }\n    }\n}\n\nconst EnterNameView = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(EnterName)\n\nexport default EnterNameView;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LeaderBoardView = (props) => {\n    if (!props.highScoreList) return <></>;\n    const rows = props.highScoreList.results.map((r, idx) => {\n        let className = '';\n        if (props.userId && r.id === props.userId) {\n            className = 'user-row-in-highscore';\n        }\n        return <tr className={className} key={idx + 1}>\n            <td>#{idx + 1}</td\n            ><td>{r.userName}</td>\n            <td className='date-column'>{(new Date(r.utcDateTime)).toLocaleDateString()}</td>\n            <td>{r.score}</td></tr>;\n    });\n    return <>\n        <div>\n            <h3>{props.highScoreList.name}</h3>\n            <table className=\"highscoretable\">\n                <thead>\n                    <tr>\n                        <th>Position</th>\n                        <th>Name</th>\n                        <th className='date-column'>Date</th>\n                        <th>{props.highScoreList.unit}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {rows}\n                </tbody>\n            </table>\n        </div>\n    </>;\n}\n\nLeaderBoardView.propTypes = {\n    highScoreList: PropTypes.object,\n    name: PropTypes.string,\n    unit: PropTypes.string,\n    userId: PropTypes.string\n};\n\nexport default LeaderBoardView;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux'\nimport EnterNameView from './EnterNameView';\nimport LeaderBoardView from './LeaderBoardView';\n\nconst GameStatus = props => {\n    if (props.gameComplete) {\n        return <div className='game-status'>\n            <div>GAME COMPLETE!</div>\n            <div>You used {props.turnNo - 1} turns</div>\n            {props.highScorePosition > 0 && !props.highScoreListSaved && (\n                <EnterNameView />\n            )}\n            {props.highScorePosition > 0 && props.highScoreListSaved && (\n                <LeaderBoardView\n                    highScoreList={props.highScoreList}\n                    userId={props.userId}\n                />\n            )}\n        </div>\n    } else {\n        return <div className='game-status'>\n            Turn: <b>{props.turnNo}</b>\n            <div className='game-instructions'>\n                {props.numClicksWithinTurn === 0 &&\n                    <div>\n                        Click on the tile that should be moved\n                    </div>\n                }\n                {props.numClicksWithinTurn === 1 &&\n                    <div>\n                        Click on the tile that should be swapped with the first selected tile\n                    </div>\n                }\n            </div>\n        </div>\n    }\n}\n\nGameStatus.propTypes = {\n    gameComplete: PropTypes.bool,\n    turnNo: PropTypes.number,\n    numClicksWithinTurn: PropTypes.number,\n    highScorePosition: PropTypes.number,\n    highScoreListSaved: PropTypes.bool,\n    highScoreList: PropTypes.object,\n    userId: PropTypes.string,\n};\n\nconst mapStateToProps = state => {\n    return {\n        gameComplete: state.gameComplete,\n        turnNo: state.turnNo,\n        numClicksWithinTurn: state.numClicksWithinTurn,\n        highScoreList: state.highScoreList,\n        highScorePosition: state.highScorePosition,\n        highScoreListSaved: state.highScoreListSaved,\n        userId: state.userId\n    }\n};\n\nconst GameStatusView = connect(\n    mapStateToProps\n)(GameStatus)\n\nexport default GameStatusView;\n","import React from 'react';\nimport './Game.css';\nimport PropTypes from 'prop-types';\n\nfunction TileView(props) {\n    const i = props.id;\n    const top = -(Math.floor(i / props.size)) * props.tileWidth;\n    const left = i < props.size ? -i * props.tileWidth : -(i % props.size) * props.tileWidth;\n\n    const imPath = `${window.location.href}/images/img${props.imageNumber}.jpg`;\n    let style = {\n        backgroundPosition: `left ${left}px top ${top}px`,\n        backgroundImage: `url('${imPath}')`,\n        backgroundSize: `${props.width}px`\n    }\n\n    if (props.correctPos) {\n        // Use a special style as a hint on that the tile is on\n        // the correct position\n        style = {\n            ...style,\n            outline: '1px solid white',\n            outlineOffset: '-10px',\n        }\n    }\n\n    let className = props.selected ? 'tile selected' : 'tile';\n    return (\n        <div className={className}\n            style={style}\n            onClick={() => props.onClick(props.id)}\n        >\n        </div>\n    );\n}\n\nTileView.propTypes = {\n    id: PropTypes.number,\n    size: PropTypes.number,\n    tileWidth: PropTypes.number,\n    selected: PropTypes.bool,\n    correctPos: PropTypes.bool,\n    imageNumber: PropTypes.number,\n    onClick: PropTypes.func,\n    width: PropTypes.number\n};\n\nexport default TileView;\n","import React from 'react';\nimport { connect } from 'react-redux'\nimport TileView from './TileView'\nimport { selectTile } from '../reducers/actions';\nimport PropTypes from 'prop-types';\n\nconst Puzzle = (props) => {\n    const width = Math.min(window.innerWidth, window.innerHeight);\n    const tileWidth = width / props.size;\n    const tileWrapperStyle = {\n        width: `${props.size * tileWidth}px`\n    }\n    const tileContainerStyle = {\n        gridTemplateColumns: `repeat(${props.size},${tileWidth}px)`\n    }\n\n    return (\n        <div>\n            <div className='tile-wrapper' style={tileWrapperStyle}>\n                <div className='tile-container' style={tileContainerStyle}>\n                    {\n                        props.tiles.map((t, idx) =>\n                            <TileView key={idx}\n                                id={t.id}\n                                correctPos={t.id === idx}\n                                imageNumber={props.imageNumber}\n                                onClick={props.onTileClicked}\n                                tileWidth={tileWidth}\n                                size={props.size}\n                                selected={props.selectedId === t.id}\n                                width={width}\n                            />)\n                    }\n                </div>\n            </div>\n        </div>\n    );\n}\n\nPuzzle.propTypes = {\n    onTileClicked: PropTypes.func,\n    size: PropTypes.number,\n    tiles: PropTypes.array,\n    imageNumber: PropTypes.number,\n    selectedId: PropTypes.number\n};\n\nconst mapStateToProps = state => {\n    return {\n        size: state.size,\n        tiles: state.tiles,\n        imageNumber: state.imageNumber,\n        selectedId: state.selectedId\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onTileClicked: id => {\n            dispatch(selectTile(id));\n        }\n    }\n}\n\nconst PuzzleView = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Puzzle)\n\nexport default PuzzleView;\n","import React from 'react';\nimport { connect } from 'react-redux'\nimport { GameId_4x4, GameId_5x5, GameId_6x6, GameId_7x7, NumImages } from '../constants';\nimport { initGame, shuffleTiles } from '../reducers/actions';\nimport './Game.css';\nimport PropTypes from 'prop-types';\nimport { fetchHighScoreList } from '../reducers/thunks';\n\nconst RestartButtons = (props) =>\n    <>\n        <button className='game-button' onClick={() => props.onInitGame(GameId_4x4)}>Restart 4x4</button>\n        <button className='game-button' onClick={() => props.onInitGame(GameId_5x5)}>Restart 5x5</button>\n        <button className='game-button' onClick={() => props.onInitGame(GameId_6x6)}>Restart 6x6</button>\n        <button className='game-button' onClick={() => props.onInitGame(GameId_7x7)}>Restart 7x7</button>\n    </>;\n\nRestartButtons.propTypes = {\n    onInitGame: PropTypes.func\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onInitGame: gameId => {\n            dispatch(initGame(gameId, Math.floor(Math.random() * NumImages) + 1));\n            dispatch(shuffleTiles());\n            dispatch(fetchHighScoreList);\n        }\n    }\n}\n\nconst RestartButtonsView = connect(\n    null,\n    mapDispatchToProps\n)(RestartButtons)\n\nexport default RestartButtonsView;\n","export const NumImages = 18;\nexport const GameId_4x4 = 0;\nexport const GameId_5x5 = 1;\nexport const GameId_6x6 = 2;\nexport const GameId_7x7 = 3;\n","import React from 'react';\nimport './Game.css';\nimport PropTypes from 'prop-types';\n\nconst GameHeaderView = (props) =>\n    <>\n        <header className='game-header'>\n            <div className='game-title'>Image Puzzle</div>\n        </header>\n        <div><h2>{props.gameName}</h2></div>\n    </>;\n\nGameHeaderView.propTypes = {\n    gameName: PropTypes.string,\n};\n\nexport default GameHeaderView;","import React from 'react';\nimport './Game.css';\nimport GameStatusView from './GameStatusView';\nimport PuzzleView from './PuzzleView';\nimport RestartButtonsView from './RestartButtonsView';\nimport GameHeaderView from './GameHeaderView';\nimport LeaderBoardView from './LeaderBoardView';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nconst Game = (props) =>\n    <div className='game'>\n        <GameHeaderView gameName={props.gameName} />\n        <GameStatusView />\n        <PuzzleView />\n        <RestartButtonsView />\n        <LeaderBoardView highScoreList={props.highScoreList} />\n    </div>\n\nGame.propTypes = {\n    gameName: PropTypes.string,\n    highScoreList: PropTypes.object\n};\n\nconst mapStateToProps = state => {\n    return {\n        gameName: state.gameName,\n        highScoreList: state.highScoreList\n    }\n}\n\nconst GameView = connect(\n    mapStateToProps\n)(Game)\n\nexport default GameView;\n","import './App.css';\nimport GameView from './views/GameView';\nimport React from 'react';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <GameView />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({\n            getCLS,\n            getFID,\n            getFCP,\n            getLCP,\n            getTTFB\n        }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;","export const gameConfigs = [\n    {\n        'name': '4x4 Puzzle',\n        'size': 4,\n        'highscorelistid': process.env.REACT_APP_HIGHSCORELISTID_4x4\n    },\n    {\n        'name': '5x5 Puzzle',\n        'size': 5,\n        'highscorelistid': process.env.REACT_APP_HIGHSCORELISTID_5x5\n    },\n    {\n        'name': '6x6 Puzzle',\n        'size': 6,\n        'highscorelistid': process.env.REACT_APP_HIGHSCORELISTID_6x6\n    },\n    {\n        'name': '7x7 Puzzle',\n        'size': 7,\n        'highscorelistid': process.env.REACT_APP_HIGHSCORELISTID_7x7\n    }\n]\n","\nimport shuffle from 'shuffle-array';\n\nexport function generateTileSet(size) {\n    let newTilesArray = [];\n    for (let i = 0; i < size * size; i++) {\n        let newTile = {\n            id: i,\n            top: -(Math.floor(i / size)) * 100,\n            left: i < size ? -i * 100 : -(i % size) * 100,\n        };\n        newTilesArray.push(newTile);\n    }\n    return newTilesArray;\n}\n\nexport function reverseTileSet(tiles) {\n    return [...tiles].reverse();\n}\n\nexport function shuffleTileSet(tiles) {\n    return shuffle([...tiles]);\n}\n\nexport function swapTilesInSet(tiles, sourceId, destId) {\n    const copy = [...tiles];\n    let sourceIdx = copy.findIndex(t => t.id === sourceId);\n    let source = copy[sourceIdx];\n    let destIdx = copy.findIndex(t => t.id === destId);\n    let dest = Object.assign({}, copy[destIdx]);\n    copy[destIdx] = source;\n    copy[sourceIdx] = dest;\n    return copy;\n}\n\nexport function allTilesAreAligned(tiles) {\n    for (let i = 0; i < tiles.length; i++) {\n        if (tiles[i].id !== i) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function getIndexInHighScoreList(newUserId, userTime, score, highScoreList) {\n    const resultsCopy = highScoreList.results.map(r => {\n        return {\n            id: r.id,\n            score: r.score,\n            time: isNaN(Date.parse(r.utcDateTime)) ? 0 : Date.parse(r.utcDateTime)\n        }\n    });\n    resultsCopy.push({\n        id: newUserId,\n        score,\n        time: userTime\n    });\n    resultsCopy.sort((a, b) => (a.score - b.score) || (b.time - a.time));\n\n    let idxInHighScoreList = resultsCopy.findIndex(r => r.id === newUserId);\n    if (idxInHighScoreList > -1 && (idxInHighScoreList + 1 <= highScoreList.maxSize)) {\n        return idxInHighScoreList;\n    } else {\n        return -1;\n    }\n}\n","import { gameConfigs } from '../game-configs';\nimport {\n    HIGHSCORE_LIST_LOADED, HIGHSCORE_LIST_SAVED, INIT_GAME, NAME_CHANGED, REVERSE_TILES, SELECT_TILE, SHUFFLE_TILES\n} from './actions';\nimport { allTilesAreAligned, generateTileSet, reverseTileSet, shuffleTileSet, swapTilesInSet, getIndexInHighScoreList } from './tileset-functions';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst initialState = {\n    turnNo: 1,\n    numClicksWithinTurn: 0,\n    selectedId: undefined,\n    gameComplete: false,\n    imageNumber: 1,\n    tiles: [],\n    size: undefined,  // number of rows/columns in the puzzle matrix\n    gameId: undefined,\n    gameName: undefined,\n    highScoreList: undefined,\n    highScorePosition: -1,\n    userName: undefined,\n    userId: undefined,\n    highScoreListSaved: false\n};\n\n\n// The reducer for the game\n// State is an object with game status and an array of tiles\n// The array represents a size*size matrix with a unique \n// numerical value 0...size*size-1 per tile\n// A tile is an object with these properties:\n// {\n//    id: number, // the number/value for the tile\n//    top: number, // pixel offset for the image that is projected on the tile\n//    left: number // pixel offset for the image that is projected on the tile\n// }\n//    \nfunction tileGame(state = initialState, action) {\n    switch (action.type) {\n        case INIT_GAME: {\n            const size = gameConfigs[action.gameId].size\n            return Object.assign({}, initialState,\n                {\n                    gameId: action.gameId,\n                    size,\n                    gameName: gameConfigs[action.gameId].name,\n                    imageNumber: action.imageNumber,\n                    tiles: generateTileSet(size),\n                    highScoreListId: gameConfigs[action.gameId].highscorelistid\n                });\n        }\n\n        case SELECT_TILE: {\n            if (state.gameComplete) {\n                return state;\n            }\n            if (action.id < 0 || action.id > (state.size * state.size - 1)) {\n                return state;\n            }\n            const numClicks = state.numClicksWithinTurn + 1;\n            if (numClicks === 1) {\n                const newTiles = state.tiles.map(t => t);\n                return Object.assign({}, state, {\n                    selectedId: action.id,\n                    numClicksWithinTurn: numClicks,\n                    gameComplete: false,\n                    tiles: newTiles\n                });\n            }\n\n            const newTiles = state.tiles.map(t => t);\n            if (action.id === state.selectedId) {\n                return Object.assign({}, state, {\n                    selectedId: undefined,\n                    numClicksWithinTurn: 0,\n                    tiles: newTiles\n                });\n            }\n            const setWithSwappedTiles = swapTilesInSet(newTiles, state.selectedId, action.id);\n            const gameComplete = allTilesAreAligned(setWithSwappedTiles);\n\n            if (gameComplete && state.highScoreList) {\n                const newUserId = uuidv4();\n                const time = Date.now();\n                const idxInHighScoreList = getIndexInHighScoreList(newUserId, time, state.turnNo + 1, state.highScoreList);\n                if (idxInHighScoreList > -1) {\n                    // User made it into the leaderboard\n                    return Object.assign({}, state, {\n                        selectedId: undefined,\n                        numClicksWithinTurn: 0,\n                        gameComplete,\n                        turnNo: state.turnNo + 1,\n                        tiles: setWithSwappedTiles,\n                        highScorePosition: idxInHighScoreList + 1,\n                        userId: newUserId\n                    });\n                } else {\n                    // User dit not make it into the leaderboard\n                    return Object.assign({}, state, {\n                        selectedId: undefined,\n                        numClicksWithinTurn: 0,\n                        gameComplete,\n                        turnNo: state.turnNo + 1,\n                        tiles: setWithSwappedTiles,\n                        highScorePosition: idxInHighScoreList + 1\n                    });\n                }\n            }\n            return Object.assign({}, state, {\n                selectedId: undefined,\n                numClicksWithinTurn: 0,\n                gameComplete,\n                turnNo: state.turnNo + 1,\n                tiles: setWithSwappedTiles\n            });\n        }\n\n        case SHUFFLE_TILES: {\n            const newTiles = shuffleTileSet(state.tiles);\n            return Object.assign({}, state, { tiles: newTiles });\n        }\n\n        case REVERSE_TILES: {\n            const newTiles = reverseTileSet(state.tiles);\n            return Object.assign({}, state, { tiles: newTiles });\n        }\n\n        case HIGHSCORE_LIST_LOADED: {\n            return Object.assign({}, state, {\n                highScoreList: action.highScoreList\n            });\n        }\n        case NAME_CHANGED: {\n            return Object.assign({}, state, {\n                userName: action.name\n            });\n        }\n        case HIGHSCORE_LIST_SAVED: {\n            return Object.assign({}, state, {\n                highScoreListSaved: true,\n                highScoreList: action.highScoreList\n            });\n        }\n        default:\n            return state;\n    }\n}\n\nexport default tileGame;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport tileGame from './reducers/tile-game-reducer'\nimport { initGame, shuffleTiles } from './reducers/actions';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport { GameId_4x4, NumImages } from './constants';\nimport { fetchHighScoreList } from './reducers/thunks';\n\n// For integration with Redux DevTools in browser\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(tileGame, composeEnhancers(\n    applyMiddleware(thunk)\n));\n\nstore.dispatch(initGame(GameId_4x4, Math.floor(Math.random() * NumImages) + 1));\nstore.dispatch(shuffleTiles())\nstore.dispatch(fetchHighScoreList);\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}